import numpy as np
import matplotlib.pyplot as plt
import math


# Plot some LP upper and lower bounds

Samples = [1000, 1008, 1012, 1056, 1069, 1075, 1091, 1139, 1157, 1163, 1199, 1244, 1254, 1294, 1310, 1312, 1313, 1350, 1360, 1382, 1386, 1387, 1390, 1468, 1508, 1532, 1609, 1625, 1632, 1679, 1692, 1707, 1749, 1757, 1789, 1838, 1858, 1957, 2058, 2061, 2071, 2152, 2156, 2206, 2223, 2228, 2237, 2307, 2404, 2462, 2519, 2536, 2548, 2567, 2672, 2707, 2831, 2869, 2903, 2905, 2932, 2961, 3011, 3023, 3085, 3128, 3167, 3193, 3237, 3242, 3277, 3293, 3370, 3439, 3491, 3530, 3701, 3739, 3790, 3862, 3905, 3909, 3939, 4034, 4211, 4213, 4213, 4234, 4269, 4368, 4461, 4472, 4517, 4522, 4550, 4704, 4738, 4765, 4811, 4875, 4932, 4955, 4959, 5160, 5261, 5278, 5315, 5323, 5338, 5468, 5468, 5507, 5517, 5656, 5766, 5777, 5865, 5906, 5912, 5925, 5943, 6125, 6145, 6202, 6226, 6368, 6512, 6700, 6702, 6930, 6932, 6938, 6945, 7066, 7360, 7565, 7570, 7900, 7917, 7921, 7956, 8024, 8065, 8348, 8539, 8614, 8617, 8677, 8684, 8697, 8738, 8785, 8990, 8993, 9047, 9081, 9504, 9695, 9837, 10456, 10609, 10888, 10932, 11354, 11627, 11674, 11913, 12060, 12091, 12092, 12128, 12362, 12508, 12965, 13052, 13061, 13199, 13245, 13659, 13950, 14049, 14148, 14324, 14915, 14921, 14947, 14966, 15157, 15271, 16241, 16319, 16379, 16541, 16816, 17600, 17781, 17971, 18087, 18435, 18442, 18970, 18996, 19053, 19656, 20712, 20749, 20834, 21848, 22439, 22542, 22800, 23403, 23454, 23528, 23728, 23827, 24607, 25031, 25085, 25479, 25795, 25933, 25965, 26845, 27908, 28343, 28438, 28749, 28954, 29053, 29203, 30394, 31009, 32034, 32729, 35377, 35814, 36353, 37119, 38766, 39176, 39346, 40683, 40996, 41137, 41417, 41691, 41737, 41826, 42475, 42521, 42563, 43523, 44327, 44558, 44777, 45104, 45970, 46699, 47020, 47354, 47756, 47843, 48690, 51636, 52114, 55822, 57179, 57327, 57927, 58886, 60320, 60714, 60789, 61082, 61946, 64696, 66608, 67613, 71256, 73949, 73994, 74533, 74568, 75102, 75687, 78585, 78677, 79435, 81645, 83781, 87547, 89261, 91800, 93614, 93905, 94640, 95716, 95985, 98550, 98977, 100000]

Bounds = [[312, 313], [315, 316], [316, 317], [330, 331], [333, 334], [335, 336], [340, 341], [356, 357], [363, 364], [364, 365], [377, 378], [391, 392], [393, 394], [405, 406], [411, 412], [412, 413], [412, 413], [425, 426], [427, 428], [434, 435], [436, 437], [436, 437], [437, 438], [464, 465], [475, 476], [483, 484], [506, 507], [513, 514], [515, 516], [530, 531], [534, 535], [539, 540], [552, 553], [555, 556], [565, 566], [581, 582], [589, 590], [621, 622], [655, 656], [656, 657], [658, 659], [682, 683], [684, 685], [703, 704], [708, 709], [710, 711], [712, 713], [735, 736], [766, 767], [783, 784], [803, 804], [806, 807], [812, 813], [818, 819], [854, 855], [864, 865], [905, 906], [916, 917], [928, 929], [928, 929], [937, 938], [947, 948], [963, 964], [967, 968], [987, 988], [1002, 1003], [1015, 1016], [1023, 1024], [1038, 1039], [1040, 1041], [1051, 1052], [1057, 1058], [1081, 1082], [1106, 1107], [1123, 1124], [1134, 1135], [1189, 1190], [1202, 1203], [1220, 1221], [1243, 1244], [1257, 1258], [1258, 1259], [1267, 1268], [1299, 1300], [1356, 1357], [1356, 1357], [1356, 1357], [1363, 1364], [1374, 1375], [1405, 1406], [1438, 1439], [1443, 1444], [1457, 1458], [1459, 1460], [1468, 1469], [1518, 1521], [1530, 1531], [1538, 1539], [1553, 1554], [1576, 1577], [1594, 1595], [1599, 1600], [1599, 1600], [1669, 1670], [1703, 1704], [1710, 1711], [1721, 1722], [1725, 1726], [1730, 1731], [1770, 1771], [1770, 1771], [1782, 1783], [1788, 1789], [1833, 1834], [1867, 1868], [1874, 1875], [1901, 1902], [1912, 1913], [1914, 1915], [1919, 1920], [1926, 1927], [1987, 1988], [1992, 1993], [2013, 2014], [2021, 2022], [2067, 2068], [2115, 2116], [2176, 2177], [2176, 2177], [2252, 2253], [2253, 2254], [2255, 2256], [2257, 2258], [2298, 2299], [2397, 2398], [2464, 2465], [2466, 2467], [2574, 2575], [2579, 2580], [2581, 2582], [2591, 2592], [2615, 2616], [2628, 2629], [2724, 2725], [2786, 2787], [2812, 2813], [2813, 2814], [2832, 2833], [2832, 2833], [2838, 2839], [2854, 2855], [2868, 2869], [2936, 2937], [2937, 2938], [2954, 2955], [2965, 2966], [3104, 3105], [3166, 3167], [3215, 3216], [3420, 3421], [3472, 3473], [3566, 3567], [3580, 3581], [3721, 3722], [3812, 3813], [3827, 3828], [3909, 3910], [3956, 3957], [3966, 3967], [3967, 3968], [3980, 3981], [4059, 4060], [4106, 4107], [4257, 4258], [4288, 4289], [4291, 4292], [4333, 4334], [4350, 4351], [4489, 4490], [4584, 4585], [4618, 4619], [4652, 4653], [4711, 4712], [4905, 4907], [4909, 4910], [4917, 4918], [4925, 4926], [4988, 4989], [5026, 5027], [5346, 5348], [5372, 5374], [5392, 5394], [5449, 5450], [5541, 5543], [5804, 5805], [5868, 5870], [5928, 5930], [5965, 5967], [6082, 6083], [6083, 6085], [6262, 6263], [6269, 6271], [6288, 6290], [6492, 6493], [6847, 6848], [6858, 6860], [6888, 6889], [7227, 7229], [7422, 7424], [7457, 7459], [7543, 7545], [7747, 7749], [7764, 7766], [7786, 7788], [7856, 7858], [7886, 7888], [8149, 8151], [8292, 8294], [8312, 8314], [8438, 8440], [8549, 8551], [8591, 8593], [8605, 8607], [8898, 8901], [9254, 9256], [9407, 9409], [9436, 9439], [9539, 9542], [9610, 9612], [9645, 9647], [9693, 9695], [10095, 10098], [10303, 10306], [10647, 10649], [10876, 10879], [11766, 11769], [11916, 11919], [12094, 12097], [12349, 12352], [12910, 12913], [13047, 13050], [13103, 13106], [13556, 13559], [13662, 13665], [13712, 13715], [13803, 13806], [13897, 13900], [13912, 13915], [13944, 13948], [14155, 14158], [14173, 14176], [14187, 14190], [14509, 14512], [14779, 14783], [14856, 14860], [14930, 14934], [15045, 15049], [15339, 15343], [15582, 15586], [15697, 15700], [15808, 15811], [15942, 15945], [15968, 15972], [16259, 16263], [17246, 17250], [17414, 17418], [18666, 18671], [19120, 19125], [19165, 19170], [19366, 19371], [19700, 19705], [20190, 20195], [20317, 20322], [20343, 20348], [20445, 20450], [20734, 20739], [21665, 21670], [22316, 22322], [22653, 22659], [23891, 23897], [24800, 24806], [24816, 24822], [24996, 25002], [25009, 25015], [25193, 25199], [25394, 25400], [26374, 26380], [26405, 26411], [26660, 26666], [27407, 27414], [28137, 28144], [29410, 29417], [29986, 29993], [30854, 30861], [31462, 31469], [31568, 31576], [31815, 31823], [32184, 32192], [32267, 32275], [33146, 33154], [33289, 33297], [33641, 33649]]

def best_lower(n):
    best = 0
    for i in range(len(Samples)):
        if Samples[i] <= n:
            best = Bounds[i][0]
        else:
            return best
    return best

def best_upper(n):
    for i in range(len(Samples)):
        if Samples[i] >= n:
            return Bounds[i][1]
    return 0
        
def is_prime(n):
    """Return True if n is a prime number, else False."""
    if n < 2:
        return False
    # Check divisibility from 2 up to sqrt(n)
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def logfac(N):
    sum = 0
    for i in range(1, N+1):
        sum += math.log(i)
    return sum

# Test if  \sum_{p > \frac{t}{\sqrt{t}+1}} \left\lfloor \frac{N}{p} \right\rfloor \log \left( \frac{p}{t} \left\lceil \frac{t}{p} \right\rceil \right) > \log N! - N \log t

def criterion( N, t ):
    sum = 0
    for p in range(1, N + 1):
        if is_prime(p) and p > t/(math.floor(math.sqrt(t))):
            sum += math.floor(N/p) * math.log((p/t)*math.ceil(t/p))
    if sum > logfac(N) - N * math.log(t) + 0.0001:
        return True


def best_t( N, init ):
    print(f"Testing {N}")
    for t in range(init, N+1):
        if criterion(N,t):
            return t-1
    return N


def plot():
    base = [10*n for n in range(100,10001)]
    lb = [Bounds[i][0]/Samples[i] for i in range(len(Samples))]
    ub = [Bounds[i][1]/Samples[i] for i in range(len(Samples))]
    lin = [best_t(Samples[i], Bounds[i][0])/Samples[i] for i in range(len(Samples))]
    third = [1/3 for _ in base]
    c0 = 0.3044
    asym = [1/math.e - c0 / math.log(N) for N in base]
    c1 = 0.7555
    asym2 = [1/math.e - c0 / math.log(N) - c1 / math.log(N)**2 for N in base]
    plt.figure(figsize=[8, 6])
    plt.plot(Samples, lb, label='Linear programming (lower)', marker='.',linestyle='None', markersize=3 )
    plt.plot(Samples, ub, label='Linear programming (upper)', marker='.', linestyle='None', markersize=3) 
    plt.plot(Samples, lin, label='Lemma 5.3', marker='.', linestyle='None', markersize=3) 
    plt.plot(base, third, label='$1/3$', linestyle='--')
    plt.plot(base, asym, label='$1/e - c_0/\\log N$', linestyle='--')
    plt.plot(base, asym2, label='$1/e - c_0/\\log N - c_1/ \\log^2 N$', linestyle='--')
    plt.title('Approximations to $t[N]/N$')
    plt.xlabel('$N$')
    plt.ylim(0.31,0.34)
    plt.legend()
    plt.grid(True)
    plt.show()

plot()
